#some docker commands
docker build -t imagename .
docker ps 
docker ps -a
docker build --tag nameset .
docker logs container id
docker create imagename commandname
docker start containerid
docker stop containerid
docker kill containerid
docker exec -it containerid redis-cli
docker exec -it containerid sh
docker run -it busybox sh
docker exec -it -u root jenkins /bin/bash (start container bash as root)

sudo docker inspect -f "{{ .NetworkSettings.IPAddress }}" container_name (get ip of a container)

docker run -it -p 2200:22 imagename (start docker as root and change password for root and later start as root using exec coommand)
docker run -p 8080:80 -p 3000:3000 -p 5432:5432 my_docker_image (For multiple ports)
adduser username
adduser username sudo (give priviliges)

install open-ssh for ssh service and start the service
after that you can ssh into your docker container.


ssh-keygen
service --status-all
service ssh start
#ssh-copy-id -i /root/.ssh/id_rsa.pub root@172.17.0.2
ssh-copy-id root@172.17.0.2

jenkins 172.17.0.3

cat /etc/group


/etc/init.d/ssh status

netstat -plant |grep :22


docker exec -u 0 -it 47ad6ada92a932a81354c20b529f53cd1550335cbb810ade5ffe6b76f9d63833 /bin/bash
kubectl exec -it pod/graylog-5d478b44c7-4gdn6 bash


--------------------------------------------------------------------------------------
kubernetes command

kubectl get all #show everything in default namespace

kubectl get nodes #list the nodes in Kubernetes

kubectl get pods #list pods and name

kubectl get pods -o wide #list ip, names and details

kubectl log podname #check logs

kubectl log -f podname #continous logs

kubectl log podname -c containername #if pod has more than one container

kubectl describe podname #describe the events, date and description

kubectl apply -f deployment.yml #deploy kubernetes resources mentioned in deployment.yml

kubectl apply -f service.yml #deploy service resources mentioned in service.yml

kubectl delete deployment deploymentname #for deleting deployment

kubectl delete service servicename #for deleting service
kubectl run redis -l tier=db --image=redis:alpine 3to give tier details(label details)
kubectl get pod podname -o=jsonpath='{range .status.containerStatuses[*]}{.name}: {.state}\n{end}' #to check extra details of pod with multiple containers


kubectl edit pod podname
kubectl get rs
kubectl edit replicaset replicasetname
kubectl explain replicaset
kubectl run nginx --image=nginx --dry-run=client -o yaml #will create a yaml for your deployment
kubectl create deployment nginx --image=nginx--dry-run=client -o yaml > nginx-deployment.yaml

kubectl expose pod nginx --port=80 --name nginx-service --type=NodePort --dry-run=client -o yaml #create service file

kubectl create deployment deploymentname --image=imagename --replicas=3 #to create a deployment in kubernetes

kubectl replace -f deployment.yaml #to update without deleting

kubectl scale --replicas=6 -f deployment.yaml #to iincrease replicas  n one command
kubectl scale --replicas=6 replicaser replicasetname # another way to do it

kubectl replace --force -f filepath.yml

#configmaps
kubectl create cm configmapname --from-literal=APP_COLOR=darkblue
kubectl create secret generic db-secret --from-literal=DB_Host=sql01 --from-literal=DB_User=root --from-literal=DB_Password=password123


kubectl label node/pod node/podname color=blue

kubectl exec -it podname -- ls -l
kubectl exec -it podname /bin/bash


#get all pods in a single yaml file
kubectl get pods -o yaml > webapp.yaml

#check node processing status
kubectl top node
kubectl top pod

#kill container inside a pod with multiple containers 
kubectl exec POD_NAME -c CONTAINER_NAME /sbin/killall5



######################rollback deployment command##########################
k rollout undo deployment deploymentname

k rollout status deployment deployment-name #to check deployment rollout process
k rollout history deployment deploymentame
